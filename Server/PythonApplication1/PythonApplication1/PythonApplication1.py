import socket  # Импорт библиотеки для работы с сокетами
import threading  # Импорт библиотеки для работы с потоками

clients = {}  # Словарь для хранения информации о клиентах (адрес и имя пользователя)

# Функция для обработки данных, полученных от клиента
def handle_client(data, addr):
    global clients  # Объявление использования глобальной переменной clients
    clients[addr] = data.decode('latin-1')  # Декодирование полученных данных и сохранение в словаре по адресу клиента
    print(f"Received from {addr}: {clients[addr]}")  # Вывод информации о полученных данных от клиента

# Функция для запуска сервера на указанном порту
def start_server(port):
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)  # Создание UDP сокета
    server_socket.bind(('0.0.0.0', port))  # Привязка сокета к адресу и порту (прослушивание всех интерфейсов)

    while True:  # Бесконечный цикл для приема данных
        data, addr = server_socket.recvfrom(1024)  # Получение данных и адреса клиента (максимум 1024 байта)
        handle_client(data, addr)  # Обработка полученных данных от клиента

# Проверка, запущен ли скрипт как основная программа
if __name__ == "__main__":
    port = 8888  # Установка порта, на котором будет работать сервер
    print(f"Server started on port {port}")  # Вывод сообщения о запуске сервера

    # Запуск сервера в отдельном потоке для обработки клиентов
    threading.Thread(target=start_server, args=(port,), daemon=True).start()  # Создание и запуск потока для сервера

    while True:  # Бесконечный цикл для вывода активных клиентов
        # Вывод списка активных клиентов
        print("Active Clients:")  # Заголовок для списка клиентов
        for addr in clients:  # Итерация по всем адресам клиентов в словаре
            print(f"Address: {addr}, User: {clients[addr]}")  # Вывод адреса клиента и его имени
        print("n")  # Печать пустой строки для разделения выводов
        threading.Event().wait(10)  # Ожидание 10 секунд перед обновлением списка клиентов
